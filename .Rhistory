library(magrittr)
source(here('src/FUNCTION_update_games_and_torvik.R'))
read.csv(here('data/all_torvik2019.csv')) %>% tail(., 5)
update_games_and_torvik(season = 2019, last_n_days = 2)
# Merge data together
library(dplyr)
library(magrittr)
games <- read.csv(here('data/all_games2019.csv')) %>%
mutate(Total = Home_score + Road_score)
torvik <- read.csv(here('data/all_torvik2019.csv'))
# Convert date to Date format
games$Date <- as.Date(games$Date)
torvik$Date <- as.Date(torvik$Date)
torvik$Date <- torvik$Date + 1
# Remove duplicated torvik day ratings
torvik <- torvik[!duplicated(torvik[c(2,22)]), ]
# Add road team stats
newdf <- left_join(games, torvik, by = c('Road' = 'Team', 'Date'))
colnames(newdf)[9:28] <- paste0(colnames(newdf[9:28]), '_road')
# Add home team stats
newdf <- left_join(newdf, torvik, by = c('Home' = 'Team', 'Date'))
colnames(newdf)
colnames(newdf)[29:48] <- paste0(colnames(newdf[29:48]), '_home')
# Update data
library(here)
library(magrittr)
source(here('src/FUNCTION_update_games_and_torvik.R'))
read.csv(here('data/all_torvik2019.csv')) %>% tail(., 5)
update_games_and_torvik(season = 2019, last_n_days = 2)
# Merge data together
library(dplyr)
library(magrittr)
games <- read.csv(here('data/all_games2019.csv')) %>%
mutate(Total = Home_score + Road_score)
torvik <- read.csv(here('data/all_torvik2019.csv'))
# Convert date to Date format
games$Date <- as.Date(games$Date)
torvik$Date <- as.Date(torvik$Date)
torvik$Date <- torvik$Date + 1
# Remove duplicated torvik day ratings
torvik <- torvik[!duplicated(torvik[c(2,22)]), ]
View(torvik)
# Add road team stats
newdf <- left_join(games, torvik, by = c('Road' = 'Team', 'Date'))
View(newdf)
colnames(newdf)[9:28] <- paste0(colnames(newdf[9:28]), '_road')
# Add home team stats
newdf <- left_join(newdf, torvik, by = c('Home' = 'Team', 'Date'))
colnames(newdf)
colnames(newdf)[29:48] <- paste0(colnames(newdf[29:48]), '_home')
# Merge data together
library(dplyr)
library(magrittr)
games <- read.csv(here('data/all_games2019.csv')) %>%
mutate(Total = Home_score + Road_score)
torvik <- read.csv(here('data/all_torvik2019.csv'))
# Fill NAs in scores with x in games
games[is.na(games)] <- 'x'
# Convert date to Date format
games$Date <- as.Date(games$Date)
torvik$Date <- as.Date(torvik$Date)
torvik$Date <- torvik$Date + 1
# Remove duplicated torvik day ratings
torvik <- torvik[!duplicated(torvik[c(2,22)]), ]
# Add road team stats
newdf <- left_join(games, torvik, by = c('Road' = 'Team', 'Date'))
colnames(newdf)[9:28] <- paste0(colnames(newdf[9:28]), '_road')
# Add home team stats
newdf <- left_join(newdf, torvik, by = c('Home' = 'Team', 'Date'))
colnames(newdf)
colnames(newdf)[29:48] <- paste0(colnames(newdf[29:48]), '_home')
write.csv(newdf, file = here('data/season_data2019.csv'),
row.names = F)
library(here)
library(dplyr)
fit1 <- readRDS(here('models/log_regression_adje_model.rds'))
# Test model on 2019 season games
season <- read.csv(here('data/season_data2019.csv'))
head(season)
season$pred <- predict(fit1, newdata = season,
type = 'response') #%>%
season$pred_Home_w <- round(season$pred,0)
season$pred_correct <- ifelse(season$pred_Home_w == season$Home_w, 1, 0)
# Check accuracy for 2019 season
table(season$pred_correct)
prop.table(table(season$pred_correct))
# Check accuracy for yesterday, last week, last month
check_accuracy <- function(n_days){
x <- filter(season, as.Date(Date) >= Sys.Date()-n_days) %>%
select(pred_correct) %>%
table()
names(x) <- c('Incorrect', 'Correct')
print(paste('Last',n_days,'days:',
100*round(prop.table(x)[2], 3),
'percent accuracy'))
x
}
check_accuracy(1)
check_accuracy(7)
# Check accuracy for yesterday, last week, last month
check_accuracy <- function(n_days){
x <- filter(season, as.Date(Date) < Sys.Date()) %>%
filter(as.Date(Date) >= Sys.Date()-n_days) %>%
select(pred_correct) %>%
table()
names(x) <- c('Incorrect', 'Correct')
print(paste('Last',n_days,'days:',
100*round(prop.table(x)[2], 3),
'percent accuracy'))
x
}
check_accuracy(1)
check_accuracy(7)
check_accuracy(30)
# Predict todays games
todays_games <- filter(season, Date == Sys.Date())
# Predict todays games
todays_games <- filter(season, as.Date(Date) == Sys.Date())
View(todays_games)
todays_games$pred_Home_w <- predict(fit1,
newdata = todays_games,
type = 'response') %>%
round(., 2)
todays_games <- todays_games[,c(1:7,49)] %>%
mutate(Rounded_pred = ifelse(pred_Home_w >= 0.5, 1, 0))
View(todays_games)
# Predict todays games
todays_games <- filter(season, as.Date(Date) == Sys.Date())
todays_games$pred <- predict(fit1,
newdata = todays_games,
type = 'response') #%>%
# Predict todays games
todays_games <- filter(season, as.Date(Date) == Sys.Date())
todays_games$pred <- predict(fit1,
newdata = todays_games,
type = 'response') #%>%
# Predict todays games
todays_games <- filter(season, as.Date(Date) == Sys.Date())
todays_games$pred <- predict(fit1,
newdata = todays_games,
type = 'response') %>%
round(., 4)
todays_games <- todays_games[,c(1:7,49)] #%>%
# Predict todays games
todays_games <- filter(season, as.Date(Date) == Sys.Date())
todays_games$pred <- predict(fit1,
newdata = todays_games,
type = 'response') %>%
round(., 4)
todays_games <- todays_games[,c(7,1,2,49)] #%>%
# Predict todays games
todays_games <- filter(season, as.Date(Date) == Sys.Date())
todays_games$pred <- predict(fit1,
newdata = todays_games,
type = 'response') %>%
round(., 4)
todays_games <- todays_games[,c(7,1,2,49)] %>%
mutate(pred_Home_w = ifelse(pred >= 0.5, 1, 0))
# Predict todays games
todays_games <- filter(season, as.Date(Date) == Sys.Date())
todays_games$pred <- predict(fit1,
newdata = todays_games,
type = 'response') %>%
round(., 4)
todays_games <- todays_games[,c(7,1,2,49)] %>%
mutate(pred_Home_w = ifelse(pred >= 0.5, 1, 0),
pred_winner = ifelse(pred >= 0.5, Home, Road))
# Predict todays games
todays_games <- filter(season, as.Date(Date) == Sys.Date())
todays_games$pred <- predict(fit1,
newdata = todays_games,
type = 'response') %>%
round(., 4)
todays_games <- todays_games[,c(7,1,2,49)] %>%
mutate(pred_Home_w = ifelse(pred >= 0.5, 1, 0),
pred_winner = ifelse(pred >= 0.5,
as.character(Home), Road))
# Predict todays games
todays_games <- filter(season, as.Date(Date) == Sys.Date())
todays_games$pred <- predict(fit1,
newdata = todays_games,
type = 'response') %>%
round(., 4)
todays_games <- todays_games[,c(7,1,2,49)] %>%
mutate(pred_Home_w = ifelse(pred >= 0.5, 1, 0),
pred_winner = ifelse(pred >= 0.5,
as.character(Home), as.character(Road)))
# Predict todays games
todays_games <- filter(season, as.Date(Date) == Sys.Date())
todays_games$pred <- predict(fit1,
newdata = todays_games,
type = 'response') %>%
round(., 4)
todays_games <- todays_games[,c(7,1,2,49)] %>%
mutate(pred_winner = ifelse(pred >= 0.5,
as.character(Home),
as.character(Road)))
library(here)
library(dplyr)
fit1 <- readRDS(here('models/log_regression_adje_model.rds'))
# Test model on 2019 season games
season <- read.csv(here('data/season_data2019.csv'))
head(season)
season$pred <- predict(fit1, newdata = season,
type = 'response') #%>%
season$pred_Home_w <- round(season$pred,0)
season$pred_correct <- ifelse(season$pred_Home_w == season$Home_w, 1, 0)
# Check accuracy for 2019 season
table(season$pred_correct)
prop.table(table(season$pred_correct))
# Check accuracy for yesterday, last week, last month
check_accuracy <- function(n_days){
x <- filter(season, as.Date(Date) < Sys.Date()) %>%
filter(as.Date(Date) >= Sys.Date()-n_days) %>%
select(pred_correct) %>%
table()
names(x) <- c('Incorrect', 'Correct')
print(paste('Last',n_days,'days:',
100*round(prop.table(x)[2], 3),
'percent accuracy'))
x
}
check_accuracy(1)
check_accuracy(7)
check_accuracy(30)
# Predict todays games
todays_games <- filter(season, as.Date(Date) == Sys.Date())
todays_games$pred <- predict(fit1,
newdata = todays_games,
type = 'response') %>%
round(., 4)
todays_games <- todays_games[,c(7,1,2,49)] %>%
mutate(pred_winner = ifelse(pred >= 0.5,
as.character(Home),
as.character(Road)))
View(todays_games)
# Chart of running model accuracy
season1 <- season[complete.cases(season), ]
View(season1)
# Check accuracy for 2019 season
table(season$pred_correct)
825+2272
season1$running_accuracy <- 0
i <- 1
x <- season1[1:i, ]
View(x)
x[i]$pred_correct
x[i,52]
sum(x[,52])
sum(x[,52])/nrow(x)
i <- 2
x <- season1[1:i, ]
sum(x[,52])/nrow(x)
sum(x[,51])/nrow(x)
i <- 2
x <- season1[1:i, ]
season1[i, 52] <- sum(x[,51])/nrow(x)
# Chart of running model accuracy
season1 <- season[complete.cases(season), ]
season1$running_accuracy <- 0
for(i in 1:nrow(season1)){
x <- season1[1:i, ]
season1[i, 52] <- sum(x[,51])/nrow(x)
}
library(ggplot2)
ggplot(aes(y = running_accuracy), data = season1)
ggplot(aes(y = running_accuracy, x = nrow()), data = season1)
ggplot(aes(running_accuracy) , data = season1)
# Chart of running model accuracy
season1 <- season[complete.cases(season), ]
season1$running_accuracy <- 0
season1$games <- 0
# Chart of running model accuracy
season1 <- season[complete.cases(season), ]
season1$running_accuracy <- 0
season1$games <- 0
for(i in 1:nrow(season1)){
x <- season1[1:i, ]
season1[i, 52] <- sum(x[,51])/nrow(x)
season1[i, 'games'] <- i
}
# Chart of running model accuracy
season1 <- season[complete.cases(season), ]
season1$running_accuracy <- 0
season1$games <- 0
for(i in 1:nrow(season1)){
x <- season1[1:i, ]
season1[i, 52] <- sum(x[,51])/nrow(x)
season1[i, 53] <- i
}
ggplot(aes(y = running_accuracy, x = games),
data = season1)
ggplot(aes(y = running_accuracy, x = games),
data = season1)+
geom_line()
ggplot(aes(y = running_accuracy),
data = season1)+
geom_line()
ggplot(aes(y = running_accuracy, x = games),
data = season1)+
geom_line()
ggplot(aes(y = running_accuracy, x = as.Date(Date)),
data = season1)+
geom_line()
ggplot(aes(y = running_accuracy, x = as.Date(Date)),
data = season1)+
geom_line()+
ylab('Model Accuracy')+
xlab('Date')
ggplot(aes(y = running_accuracy, x = as.Date(Date)),
data = season1)+
geom_line()+
ylab('Running Model Accuracy')+
xlab('Date')
ggplot(aes(y = running_accuracy, x = as.Date(Date)),
data = season1)+
geom_line()+
ylab('Running Model Accuracy')+
xlab('Date')+
ggtitle('2019 NCAA basketball predictive model accuracy')
library(here)
library(dplyr)
fit1 <- readRDS(here('models/log_regression_adje_model.rds'))
# Test model on 2019 season games
season <- read.csv(here('data/season_data2019.csv'))
season$pred <- predict(fit1, newdata = season,
type = 'response') #%>%
season$pred_Home_w <- round(season$pred,0)
season$pred_correct <- ifelse(season$pred_Home_w == season$Home_w, 1, 0)
# Check accuracy for 2019 season
table(season$pred_correct)
prop.table(table(season$pred_correct))
# Check accuracy for yesterday, last week, last month
check_accuracy <- function(n_days){
x <- filter(season, as.Date(Date) < Sys.Date()) %>%
filter(as.Date(Date) >= Sys.Date()-n_days) %>%
select(pred_correct) %>%
table()
names(x) <- c('Incorrect', 'Correct')
print(paste('Last',n_days,'days:',
100*round(prop.table(x)[2], 3),
'percent accuracy'))
x
}
check_accuracy(1)
check_accuracy(7)
check_accuracy(30)
# Predict todays games
todays_games <- filter(season, as.Date(Date) == Sys.Date())
todays_games$pred <- predict(fit1,
newdata = todays_games,
type = 'response') %>%
round(., 4)
todays_games <- todays_games[,c(7,1,2,49)] %>%
mutate(pred_winner = ifelse(pred >= 0.5,
as.character(Home),
as.character(Road)))
# Chart of running model accuracy
season1 <- season[complete.cases(season), ]
season1$running_accuracy <- 0
season1$games <- 0
for(i in 1:nrow(season1)){
x <- season1[1:i, ]
season1[i, 52] <- sum(x[,51])/nrow(x)
season1[i, 53] <- i
}
library(ggplot2)
ggplot(aes(y = running_accuracy, x = as.Date(Date)),
data = season1)+
geom_line()+
ylab('Running Model Accuracy')+
xlab('Date')+
ggtitle('2019 NCAA basketball predictive model accuracy')
# Update data
library(here)
library(magrittr)
source(here('src/FUNCTION_update_games_and_torvik.R'))
read.csv(here('data/all_torvik2019.csv')) %>% tail(., 5)
update_games_and_torvik(season = 2019, last_n_days = 2)
# Merge data together
library(dplyr)
library(magrittr)
games <- read.csv(here('data/all_games2019.csv')) %>%
mutate(Total = Home_score + Road_score)
torvik <- read.csv(here('data/all_torvik2019.csv'))
# Fill NAs in scores with x in games
games[is.na(games)] <- 'x'
# Convert date to Date format
games$Date <- as.Date(games$Date)
torvik$Date <- as.Date(torvik$Date)
torvik$Date <- torvik$Date + 1
# Remove duplicated torvik day ratings
torvik <- torvik[!duplicated(torvik[c(2,22)]), ]
# Add road team stats
newdf <- left_join(games, torvik, by = c('Road' = 'Team', 'Date'))
colnames(newdf)[9:28] <- paste0(colnames(newdf[9:28]), '_road')
# Add home team stats
newdf <- left_join(newdf, torvik, by = c('Home' = 'Team', 'Date'))
colnames(newdf)
colnames(newdf)[29:48] <- paste0(colnames(newdf[29:48]), '_home')
# Get tidy data for modeling
model_data <- newdf[complete.cases(newdf), ]
table(is.na(model_data))
# Save model data
write.csv(model_data, file = here('data/model_data.csv'),
row.names = F)
write.csv(newdf, file = here('data/season_data2019.csv'),
row.names = F)
read.csv(here('data/all_torvik2019.csv')) %>% tail(., 5)
library(here)
library(dplyr)
fit1 <- readRDS(here('models/log_regression_adje_model.rds'))
# Test model on 2019 season games
season <- read.csv(here('data/season_data2019.csv'))
season$pred <- predict(fit1, newdata = season,
type = 'response') #%>%
season$pred_Home_w <- round(season$pred,0)
season$pred_correct <- ifelse(season$pred_Home_w == season$Home_w, 1, 0)
# Check accuracy for 2019 season
table(season$pred_correct)
prop.table(table(season$pred_correct))
# Check accuracy for yesterday, last week, last month
check_accuracy <- function(n_days){
x <- filter(season, as.Date(Date) < Sys.Date()) %>%
filter(as.Date(Date) >= Sys.Date()-n_days) %>%
select(pred_correct) %>%
table()
names(x) <- c('Incorrect', 'Correct')
print(paste('Last',n_days,'days:',
100*round(prop.table(x)[2], 3),
'percent accuracy'))
x
}
check_accuracy(1)
check_accuracy(7)
check_accuracy(30)
# Predict todays games
todays_games <- filter(season, as.Date(Date) == Sys.Date())
todays_games$pred <- predict(fit1,
newdata = todays_games,
type = 'response') %>%
round(., 4)
todays_games <- todays_games[,c(7,1,2,49)] %>%
mutate(pred_winner = ifelse(pred >= 0.5,
as.character(Home),
as.character(Road)))
# Chart of running model accuracy
season1 <- season[complete.cases(season), ]
season1$running_accuracy <- 0
season1$games <- 0
for(i in 1:nrow(season1)){
x <- season1[1:i, ]
season1[i, 52] <- sum(x[,51])/nrow(x)
season1[i, 53] <- i
}
library(ggplot2)
ggplot(aes(y = running_accuracy, x = as.Date(Date)),
data = season1)+
geom_line()+
ylab('Running Model Accuracy')+
xlab('Date')+
ggtitle('2019 NCAA basketball predictive model accuracy')
filter(season, as.Date(Date) == Sys.Date()-1)
check_accuracy(1)
check_accuracy(7)
check_accuracy(30)
check_accuracy(60)
check_accuracy(90)
check_accuracy(60)
check_accuracy(1)
check_accuracy(7)
check_accuracy(30)
check_accuracy(60)
ggplot(aes(y = running_accuracy, x = as.Date(Date)),
data = season1)+
geom_line(lwd = 2)+
ylab('Running Model Accuracy')+
xlab('Date')+
ggtitle('2019 NCAA basketball predictive model accuracy')
ggplot(aes(y = running_accuracy, x = as.Date(Date)),
data = season1)+
geom_line(lwd = 1.5)+
ylab('Running Model Accuracy')+
xlab('Date')+
ggtitle('2019 NCAA basketball predictive model accuracy')
ggplot(aes(y = running_accuracy, x = as.Date(Date)),
data = season1)+
geom_line(lwd = 1)+
ylab('Running Model Accuracy')+
xlab('Date')+
ggtitle('2019 NCAA basketball predictive model accuracy')
ggplot(aes(y = running_accuracy, x = as.Date(Date)),
data = season1)+
geom_line(lwd = 1, col = 'blue')+
ylab('Running Model Accuracy')+
xlab('Date')+
ggtitle('2019 NCAA basketball predictive model accuracy')
ggplot(aes(y = running_accuracy, x = as.Date(Date)),
data = season1)+
geom_line(lwd = .8, col = 'blue')+
ylab('Running Model Accuracy')+
xlab('Date')+
ggtitle('2019 NCAA basketball predictive model accuracy')
ggplot(aes(y = running_accuracy, x = as.Date(Date)),
data = season1)+
geom_line(lwd = .8, col = 'red')+
ylab('Running Model Accuracy')+
xlab('Date')+
ggtitle('2019 NCAA basketball predictive model accuracy')
.29/1.78
125*.1629
View(todays_games)
